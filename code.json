{"slots":{"0":{"name":"display","type":{"events":[],"methods":[]}},"1":{"name":"databank","type":{"events":[],"methods":[]}},"2":{"name":"container2","type":{"events":[],"methods":[]}},"3":{"name":"container1","type":{"events":[],"methods":[]}},"4":{"name":"container3","type":{"events":[],"methods":[]}},"5":{"name":"container4","type":{"events":[],"methods":[]}},"6":{"name":"container5","type":{"events":[],"methods":[]}},"7":{"name":"container6","type":{"events":[],"methods":[]}},"8":{"name":"container7","type":{"events":[],"methods":[]}},"9":{"name":"container8","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"0"},"key":"0"},{"code":"showCont(2)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"2"},"key":"1"},{"code":"showCont(1)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"3"},"key":"2"},{"code":"showCont(3)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"4"},"key":"3"},{"code":"showCont(4)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"5"},"key":"4"},{"code":"showCont(5)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"6"},"key":"5"},{"code":"showCont(6)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"7"},"key":"6"},{"code":"showCont(7)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"8"},"key":"7"},{"code":"showCont(8)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"9"},"key":"8"},{"code":"unit.stopTimer(timerId) \nsystem.print(\"********* Refreshing contentlists ***********\")\nfilltable(\"all\")\nshowtable(1)","filter":{"args":[{"variable":"*"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"9"},{"code":"  showhelp()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"10"},{"code":"\nrows={}\ncontainers={}\ncontainers[1]=container1\ncontainers[2]=container2\ncontainers[3]=container3\ncontainers[4]=container4\ncontainers[5]=container5\ncontainers[6]=container6\ncontainers[7]=container7\ncontainers[8]=container8\n--databank.clear()\ncontenttable={}\npage=1\nnumberofrows=10 --export\nsearch=\"all\"\nfunction showCont(i)\n   local json=containers[i].getItemsList()\n   -- system.print(\"container\"..i..\"----->\"..json)\n     databank.setStringValue(\"c\"..i,json)\n    \n    unit.setTimer(\"filltable\",10)\nend\n    --******************* String split ****************************\nfunction split(mystring,delimiter)\n  if mystring==nil then\n        return nil\n  end\n  local result = { }\n  local from  = 1\n  local delim_from, delim_to = string.find( mystring, delimiter, from  )\n  while delim_from do\n  if(delim_from>from) then\n      table.insert( result, string.sub( mystring, from , delim_from-1 ) )\n       end\n      from  = delim_to + 1\n      delim_from, delim_to = string.find( mystring, delimiter, from  )\n   \n  end\n  table.insert( result, string.sub( mystring, from  ) )\n  return result\nend\nfunction aquireAll()\n \n  for s,v in pairs(containers) do\n        if v~=nil then\n         v.acquireStorage()\n       end    \n  end        \nend\nfunction getTableHtmlStart()\n    local html=[[<html><head><style>\nH1 {background-color: Red; color: White !important;}\nth, td {font-size: 3em; }\n.highlight {color: red !important; font-weight: normal !important; }\ntd {color: yellow !important; font-weight: normal !important; text-align: center; padding-top: 1%; padding-bottom: 1%}\n.tac {text-align: center;}\n.tar {text-align: right;}\n.RUNNING{color: Blue  !important}\n.COMPLETED {color: Green  !important}\n.SHUSH {color: Violet  !important}\n.JAMMED  {color: Red !important}\n</style></head><body><table align=center style=\"width: 100%\">\n  <tr><th width=3%>Name</th>]]..getContainerHeaderHtml()..[[<th width=3%>Sum</th></tr>    \n    ]]\n    return html\nend  \nfunction getTableHtmlEnd()\nreturn \"</table></body></html>\"\n\nend  \nfunction getContainerHeaderHtml()\nlocal html=\"\"\n  for i,v in pairs(containers) do\n  html=html..[[<th width=3%>c]]..i..[[</th>]]\n  end\n  return html\nend\n  \n\nfunction showtable(par1,par2)\nlocal counter=1    \nlocal html=getTableHtmlStart()\n   local cols={}\n    local name=\"\"\n      for k,e in pairs(rows) do\n        counter=counter+1   \n           -- fill the table from row (1) to row (numberofrows) \n           -- depending on the pagenumber which is set by command prev or next\n           -- irregular  entries must be skipped     (i.e.\"{\" )\n       --         system.print(counter..\" - \" ..par1+numberofrows)\n        if counter>par1 and counter <=(par1+numberofrows ) then\n       name=e.name\n           if name~=nil then \n              for i,con in pairs(containers) do\n                cols[i]=\"0\"\n             end\n               for j,v in pairs(e.content) do\n                 local container=v.container\n             --       system.print(container..\"-\"..split(v.quantity,\":\")[2])\n                q=tonumber(split(v.quantity,\":\")[2])\n                q=math.floor(q)\n                cols[container]=q\n                end\n          --  system.print(name)\n                html=html..[[<tr><td>]]..name..\"</td>\"\n\n                 local sum=0\n                 for j1,v1 in pairs(cols) do\n                 sum=math.floor(sum+v1)\n                 html=html..[[<td>]]..v1..[[</td>]]\n                 end\n               \n                html=html..\"<td>\"..sum..\"</td></tr>\"\n\t\tend\n        end    \n      end  \n      \n      html=html..getTableHtmlEnd()\n      display.setHTML(html)\n    --  system.print(html)\n      \nend\nfunction getField(s,name)\n local elementtable=split(s,\",\")\n          for k,e in pairs(elementtable) do\n          local foundclass=string.find(e,name)\n                    if(foundclass~=nil)then\n                        return e\n                    end    \n          end\nend\nfunction getrow(container,name,quantity)\nlocal row={}\n  for i,v in pairs(rows) do\n      if v.name==name then\n        row=v\n        local newcontainer={ quantity=quantity,container=container}\n        local newcontent=row.content\n        table.insert(        newcontent,newcontainer)\n        return\n      end\n  end\n  local content={}\n  table.insert(content,{quantity=quantity,container=container})\nlocal row={\n   name=name,\n content=content\n}\n  --  system.print(name)\nreturn row\nend\n\nfunction filltable(par2)\nrows={}\n  for i,v in pairs(containers) do\n\n        local json=databank.getStringValue(\"c\"..i)\n      \n     if json==nil or string.len(json)<1 then\n        system.print    (\"aquire \"..i)\n            v.acquireStorage()\n     --       return\n            \n     else\n   --  system.print    (\"container \"..i..\"--->\"..json)\n     local contents=split(json,\"{\")\n        for j,s in pairs(contents) do\n                 local name=\"\"\n            \n           if string.len(s)>4 then   \n                \n            local elementtable=split(s,\",\")\n            local field=getField(\n                    s,\"name\")\n        --     system.print(s)\n                field=split(field,\":\")[2]\n               \n            local shortnametabel=split(field,\" \")\n                    \n             local wordIsThere  =true\n              --    system.print(field..\" ---> \"..shortnametabel[1])  \n                if  shortnametabel~=nil then       \n\n                    for j1,s1 in pairs(shortnametabel) do\n                                name=name..string.gsub(s1,\"\\\"\",\"\")\n                    end    \n                        \n                     if par2~=\"all\" then\n                        wordIsThere = string.find(string.lower(name),string.lower( par2))\n                     --  if    wordIsThere then \n\t\t\t\t --    system.print(par2..\" found \"..name)\n                     --   end        \n                     end       \n                         -- system.print(field..\" ---> \"..name)\n       \t         end              \n                -- if search for a word is active (par2)    \n                if wordIsThere then    \n                    local quantity=getField(s,\"quantity\")\n                    local row=getrow(i,name,quantity)\n                    if row~=nil then\n                      table.insert(rows,row)\n                    end\n                end \n            end --len(s)\n        end\n     end   \n  end  \n    for i,v in pairs(rows) do\n            if(v.name~=nil) then\n  --   system.print(i..\":\"..v.name)\n        end    \n    end\n        \n         table.sort (rows, function (k1, k2) if(k1.name~=nil and k2.name~=nil) then return k1.name < k2.name end end )\n -- system.print(\"fertig\")\n--  table.foreachi (contenttable, function (k, v) table.foreach (v, print) end )\nend\n\nfunction showhelp()\n    \n    local helptext={}\n    helptext[1]=\"************available commands ******************\"\n    helptext[2]=\"help -- displays this helptext\"\n    helptext[3]=\"next -- scrolls to the next page on the display ,short n\"\n    helptext[4]=\"prev -- scrolls to the previous page on the display, short p\"\n    helptext[5]=\"refresh --aquires all container-content.only available every 5 minutes .\"\n    helptext[6]=[[search  anytext -- (minimum 3 characters ), short s text]]\n      helptext[7]=\"all -- displays the list again\"\n    helptext[8]=\"***************************************************\"\n    local html=[[<html><style>\n .YELL {color: yellow  !important;font-size: 3em;}\n    .SHUSH {color: white  !important;font-size: 3em;}</style><body>\n    <div class=\"YELL\">]]..\"Container Contentlist\"..[[</div><br>\n     <div class=\"YELL\">]]..\"Commands must be typed in the LUA Console\"..[[</div><br>]]\n    for i,s in pairs(helptext) do\n        system.print(s)\n        html=html..[[<div class=\"SHUSH\">]]..s..[[</div><br>]]\n    end\n    html=html..\"</body></html>\"\n    display.setHTML(html)\n    \nend\n unit.setTimer(\"filltable\",2)\n--aquireAll()\nshowhelp()","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"11"},{"code":"if text==\"help\" then\n  showhelp()\n  return  \nend\n system.print (text)\nif(text==\"n\" or text==\"next\") then\n page=page+1   \n system.print (\"rows = \"..(page-1)*numberofrows+1)   \n filltable(search)\n showtable((page-1)*numberofrows+1,search)\n    return\n end\nif(text==\"all\" ) then\n page=1   \n search=\"all\"\n filltable(search)\n showtable((page-1)*numberofrows+1,search)\n end \nif(text==\"p\" or text==\"prev\") then\n page=page-1   \n if p==0 then \n        p=1\n end       \n filltable(search)\n showtable((page-1)*numberofrows+1,search)\n    \n end\n\n    local searchstring=split(text,\" \")\n    if (searchstring[1]~=nil and(  searchstring[1]==\"search\" or searchstring[1]==\"s\"))then\n \t   if(searchstring[2]==nil ) then\n    \t    system.print (\"Usage: search xxxx or s xxxx\")\n     \t   return\n  \t   end\n       page=1\n        system.print(\"search:\"..searchstring[2])\n           search=searchstring[2]\n\t\t filltable(searchstring[2])\n\t\t showtable((page-1)*numberofrows+1,searchstring[2])\n    \n end\nif( text==\"refresh\") then\n    databank.clear()\n   \n  aquireAll()  \nend","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"12"}],"methods":[],"events":[]}
